import 'dart:io';

void main() {
  while (true) {
    playTicTacToe();
    print("Do you want to play again? (yes/no): ");
    String playAgain = stdin.readLineSync()!.toLowerCase();
    if (playAgain != 'yes') {
      break;
    }
  }
}

void playTicTacToe() {
  List<String> board = List.filled(9, ' '); // Initialize an empty 3x3 board
  int currentPlayer = 0; // 0 for 'X', 1 for 'O'

  print("Welcome to Tic-Tac-Toe!");

  while (true) {
    displayBoard(board);
    int move = getPlayerMove(currentPlayer);
    if (isValidMove(board, move)) {
      board[move - 1] = currentPlayer == 0 ? 'X' : 'O';

      if (checkWinner(board)) {
        displayBoard(board);
        print("Player ${currentPlayer == 0 ? 'X' : 'O'} wins!");
        break;
      } else if (isBoardFull(board)) {
        displayBoard(board);
        print("It's a draw!");
        break;
      }

      currentPlayer = 1 - currentPlayer; // Switch players
    } else {
      print("Invalid move. Please choose an empty cell (1-9).");
    }
  }
}

void displayBoard(List<String> board) {
  print(" ${board[0]} | ${board[1]} | ${board[2]} ");
  print("-----------");
  print(" ${board[3]} | ${board[4]} | ${board[5]} ");
  print("-----------");
  print(" ${board[6]} | ${board[7]} | ${board[8]} ");
}

int getPlayerMove(int currentPlayer) {
  print("Player ${currentPlayer == 0 ? 'X' : 'O'}, enter your move (1-9): ");
  String input = stdin.readLineSync()!;
  return int.tryParse(input) ?? 0;
}

bool isValidMove(List<String> board, int move) {
  return move >= 1 && move <= 9 && board[move - 1] == ' ';
}

bool checkWinner(List<String> board) {
  // Check rows, columns, and diagonals for a winner
  for (int i = 0; i < 3; i++) {
    if (board[i * 3] != ' ' &&
        board[i * 3] == board[i * 3 + 1] &&
        board[i * 3] == board[i * 3 + 2]) {
      return true; // Check rows
    }
    if (board[i] != ' ' &&
        board[i] == board[i + 3] &&
        board[i] == board[i + 6]) {
      return true; // Check columns
    }
  }
  if (board[0] != ' ' && board[0] == board[4] && board[0] == board[8]) {
    return true; // Check diagonal from top-left to bottom-right
  }
  if (board[2] != ' ' && board[2] == board[4] && board[2] == board[6]) {
    return true; // Check diagonal from top-right to bottom-left
  }
  return false;
}

bool isBoardFull(List<String> board) {
  return !board.contains(' ');
}
